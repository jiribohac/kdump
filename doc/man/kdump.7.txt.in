//{{{ Copyright (c) 2008, SUSE LINUX Products GmbH
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// Neither the name of the Novell nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific
// prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ONANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//}}}

kdump(7)
========
:man version: @PACKAGE_VERSION@
:man source: kdump
:man manual: User Manuals
Bernhard Walle <bwalle@suse.de>

Name
----
kdump - Saving kernel dumps in SUSE

Synopsis
--------
(not applicable)

Description
-----------
This manual page gives an overview about kdump configuration on SUSE.

Kdump is a technology to save the memory contents of a crashed system and save
it to disk or network to analyse it later and find the cause of the crash.
When the system crashes, the mechanism uses _kexec_ to boot a normal Linux
kernel (that has been loaded into the system previously) which then has access
to the old memory contents via _/proc/vmcore_ interface and can save that away.

After the memory has been saved, the system reboots (without kexec).

As mentioned above, that _panic kernel_ has to be loaded into the system. That
is accomplished via *kexec*(8) called by the kdump service at system bootup. To
have memory for that panic kernel and also have RAM for the execution of that
panic kernel, one has to reserve kernel memory with a special kernel command
line option (_crashkernel_). The option is added to the kernel command line by
the kdump-commandline service, but any change will only have effect for the next
boot.

Automatic Configuration
-----------------------

A simple method to use kdump on SUSE is to install
the kdump package and enable the kdump.service:

----------------------------------
# zypper install yast2-kdump
# systemctl enable kdump
----------------------------------

To update the bootloader with the default kdump commandline options
and generate the kdump initrd, you can call

----------------------------------
# systemctl start kdump
----------------------------------

This will fail, because the currently running kernel has not been
started with the _crashkernel_ commandline option. However
the service will also start the kdump-commandline.service,
which will by default update the bootloader to provide the
option on the next boot.

If you don't perform this step, the service will fail during the
next boot and kdump should be available on the second-next boot.


Manual Setup
------------

Bootloader configuration
~~~~~~~~~~~~~~~~~~~~~~~~
It's necessary to reserve a certain amount of memory in the normal system at
boot time which will be used by *kexec*(8) to load the panic kernel. To achieve
that, you have to add a parameter called _crashkernel_ in bootloader
configuration. The syntax is:

  crashkernel=size[@offset]

The optional _offset_ is the load offset, i.e. the physical base address on
which the memory reservation area starts.

To find a suggested value for _size_, us the _kdumptool calibrate_ command.
The suggested value is the sum of the Low and High values in its output.

Example: +crashkernel=256M+ (on a normal PC system)

[NOTE]
There's also a more advanced syntax that makes the amount of memory dependent on
system RAM. See <<crashkernel_exteded>>.

You can either supply the a hand-crafted crashkernel option to the
kdump-commandline.service via the KDUMP_CRASHKERNEL config option and leave the job of
updating the bootloader to the service.

Or you can disable automatic bootloader updates by setting
KDUMP_UPDATE_BOOTLOADER to "false" and managing the bootloader config yourself.

Enable kdump service
~~~~~~~~~~~~~~~~~~~~
The kdump systemd service loads the kdump kernel at boot. To enable it, run

--------------------------
# systemctl enable kdump
--------------------------

Configure kdump
~~~~~~~~~~~~~~~
The default configuration should work out of the box. You can tweak several
configuration options in the _/etc/sysconfig/kdump_ configuration file.

[IMPORTANT]
If you make changes in that configuration file, you always have to execute
_systemctl restart kdump_ manually to make that changes apply. If you don't, that
changes will only apply after system reboot.

See the section “CONFIGURATION” later and/or *kdump*(5) for a description of
the configuration options.

Testing
-------
It perfectly makes sense to test the kdump configuration in a sane system state,
i.e. not when the system really crashes but to trigger the dump manually. To
perform that, use the SysRq mechanism, i.e. just execute

---------------------------------------
# echo s > /proc/sysrq-trigger
# echo u > /proc/sysrq-trigger
# echo c > /proc/sysrq-trigger
---------------------------------------

After that, the panic kernel should boot and the dump should be saved.

The most common problem is that the panic kernel will fail because the
default amount of memory reserved by the crashkernel option is not sufficient.
This typically demonstrates by either the panic kernel failing early at boot
or running out of memory when running the kdump userspace processes 
(systemd, makedumpfile, ...). In that case you will want to manually
set the KDUMP_CRASHKERNEL config option.

The default value is provided by the _kdumptool_calibrate_ command
and set in the bootloader by the _kdumptool_commandline_ command.

You can use the values suggested by _kdumptool_calibrate_ as a starting point
for finding a correct value and setting KDUMP_CRASHKERNEL manually.

The value of KDUMP_CPUS influences the amount of memory required by kdump.
You may want to decrease the default value to limit the memory required.
Note that previously the default was to use a single CPU.


Configuration
-------------

The configuration file is _/etc/sysconfig/kdump_. Just edit this file with a
plain text editor to adjust the settings. All variables are described in
*kdump*(5). Here's a brief overview about some variables that are worth
tweaking.

Save Directory
~~~~~~~~~~~~~~
The most important setting is where the dump should be saved. Different methods
are available: local file, FTP, SFTP (SSH), NFS, CIFS.

The configuration variable _KDUMP_SAVEDIR_ has to be filled with a URL to
where the dump should be saved. The syntax is described in *kdump*(5).

[NOTE]
If you want to use SSH or SFTP with public key authentication, make sure to read the
"Secure File Transfer Protocol" section in *kdump*(5).

Preventing running out of disk space
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you save the dumps to your local file system, you may want kdump to delete
old dumps automatically. See the _KDUMP_KEEP_OLD_DUMPS_ option.

If the partition has less than _KDUMP_FREE_DISK_SIZE_ megabytes free disk space
after saving the dump, the dump is not saved at all.

[IMPORTANT]
That two options don't apply to network dump targets.

Dump Filtering and Compression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dump size can be reduced by 

- using different compresison algorithms

- filtering unnecessary pages from the dump

see _KDUMP_DUMPFORMAT_ and _KDUMP_DUMPLEVEL_ in *kdump*(5)

Notification
~~~~~~~~~~~~
If you enable notification support, then you get an email when the system reboots
after the dump has been copied. This only works for locally saved dumps.
See _KDUMP_NOTIFICATION_TO_ in *kdump*(5).

Debugging options
~~~~~~~~~~~~~~~~~
Normally the machine is rebooted when kdump finishes and all errors are ignored
to get the production system runnigng as soon as possible,

To get a shell for debugging kdump itself, see the
_KDUMP_IMMEDIATE_REBOOT_ and _KDUMP_CONTINUE_ON_ERROR_ options.

Also see the _KDUMP_VERBOSE_ option to turn on
more logging during kdump service start and during the dump itself.

To debug the creation of the kdump initrd, you may want to run
_mkdumprd -d_.

[WARNING]
If you use a VGA console and trigger the dump when X11 is running (i.e. your
graphical desktop), you might not see any output. Use a serial console in that
case, or try to trigger the dump from Linux console (i.e. press _Ctrl-Alt-F1_
in your graphical desktop and log in there).

Advanced Configuration
----------------------

Trigger Kdump on NMI (i386/x86_64 only)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some systems (mostly "Enterprise" servers) have a so-called NMI button
(physically or via the remote management consoles) that triggers an NMI
manually if the system hangs completely and even SysRQ does not work any more.

If you want to trigger a kdump in that case, you have to execute

 # sysctl kernel.panic_on_unrecovered_nmi=1

manually or (if you want to make that a permanent setting) add

 kernel.panic_on_unrecovered_nmi=1

in _/etc/sysctl.conf_.


[[crashkernel_exteded]]
Extended crashkernel commandline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While the "crashkernel=size[@offset]" syntax is sufficient for most
configurations, sometimes it's handy to have the reserved memory dependent
on the value of System RAM -- that's mostly for distributors that pre-setup
the kernel command line to avoid a unbootable system after some memory has
been removed from the machine.

The syntax is:

    crashkernel=<range1>:<size1>[,<range2>:<size2>,...][@offset]
    range=start-[end]

while _start_ is inclusive and _end_ is exclusive.

For example:

    crashkernel=512M-2G:64M,2G-:128M

This would mean:

. If the RAM is smaller than 512M, then don't reserve anything
  (this is the "rescue" case).
. If the RAM size is between 512M and 2G (exclusive), then reserve 64M.
. If the RAM size is larger than 2G, then reserve 128M.


See also
--------
*kexec*(8), *kdump*(5), *makedumpfile*(8), *crash*(8),
The Kexec and Kdump chapter in the SUSE System Analysis and Tuning Guide


// vim: set sw=4 ts=4 et tw=80 fdm=marker: :collapseFolds=1:
