//{{{ Copyright (c) 2008, SUSE LINUX Products GmbH
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// Neither the name of the Novell nor the names of its contributors may be used
// to endorse or promote products derived from this software without specific
// prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ONANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//}}}

kdump(7)
========
:man version: @PACKAGE_VERSION@
:man source: kdump
:man manual: User Manuals
Bernhard Walle <bwalle@suse.de>

Name
----
kdump - Saving kernel dumps in SUSE

Synopsis
--------
(not applicable)

Description
-----------
This manual page gives an overview about kdump configuration on SUSE. This
version applies to SUSE LINUX Enterprise 11 and openSUSE 11.1.

Kdump is a technology to save the memory contents of a crashed system and save
it to disk or network to analyse it later and find the cause of the crash.
When the system crashes, the mechanism uses _kexec_ to boot a normal Linux
kernel (that has been loaded into the system previously) which then has access
to the old memory contents via _/proc/vmcore_ interface and can save that away.

After the memory has been saved, the system reboots (without kexec).

As mentioned above, that _panic kernel_ has to be loaded into the system. That
is accomplished via *kexec*(8) in an init script at system bootup. To have
memory for that panic kernel and also have RAM for the execution of that panic
kernel, one has to reserve kernel memory with a special boot parameter
(_crashkernel_).

While it's possible in theory to boot the full system by that panic kernel, on
SUSE we use the approach of having a special _initramfs_ that saves the dump to
disk or network and then reboots. That has the advantage that less memory
is necessary and the root file system also must not be intact if you save to
another file system or to network.


Automatic Configuration with YaST
---------------------------------

A simple method to use kdump on SUSE is to use the YaST kdump module. Just
install the package _yast2-kdump_ (for example with

----------------------------------
# zypper install yast2-kdump
----------------------------------

and start the YaST2 module with

----------------------------------
# yast2 kdump
----------------------------------

Everything should be self-explanatory there.

Manual Setup
------------

Following steps are needed to setup kdump manually (the description of the steps
will follow):

. Install the required software packages,
. add the _crashkernel_ parameter to bootloader configuration,
. enable the _kdump_ service,
. configure kdump (/etc/sysconfig/kdump) and
. load the kdump kernel.

Required software
~~~~~~~~~~~~~~~~~

Following software packages are required for kdump:

* kexec-tools
* kdump
* makedumpfile

There is no special _kernel-kdump_ required like in earlier versions of SUSE
LINUX Enterprise. The technical reason is that the normal kernel is relocatable
now and can be used as kdump kernel, i.e. it's possible to load and execute the
normal kernel at any address, not only the compiled-in address as before.

Bootloader configuration
~~~~~~~~~~~~~~~~~~~~~~~~
It's necessary to reserve a certain amount of memory in the normal system at
boot time which will be used by *kexec*(8) to load the panic kernel. To achieve
that, you have to add a parameter called _crashkernel_ in bootloader
configuration. The syntax is:

  crashkernel=size@offset

The _offset_ is the load offset, i.e. the physical base address on which the
memory reservation area starts. Starting with version 2.6.27, it's not necessary
to specify that _offset_ manually since the kernel chooses a suitable base
address automatically.

For the _size_, following values are recommended:

`-----------------`--------------------------------------------
Architecture      Size
---------------------------------------------------------------
+i386+            +64M+
+x86_64+          +64M+ or +128M+ on large machines
+ppc64+           +128M+ or +256M+ on large machines
+ia64+            +512M+ (or more on very large machines)
---------------------------------------------------------------

Example: +crashkernel=64M+ (on a normal PC system)

[NOTE]
There's also a more advanced syntax that makes the amount of memory dependent on
system RAM. See <<crashkernel_exteded>>.

Enable kdump service
~~~~~~~~~~~~~~~~~~~~
The kdump runlevel script just loads the kdump kernel at boot. To enable it, use
the YaST runlevel editor or simply

--------------------------
# chkconfig boot.kdump on
--------------------------

on a shell. You can also execute it manually with +rckdump start+.

Configure kdump
~~~~~~~~~~~~~~~
The default configuration should work out of the box. You can tweak several
configuration options in the _/etc/sysconfig/kdump_ configuration file.

[IMPORTANT]
If you make changes in that configuration file, you always have to execute
_rckdump restart_ manually to make that changes apply. If you don't, that
changes will only apply after system reboot.

See the section “CONFIGURATION” later and/or *kdump*(5) for a description of
the configuration options.

Load the kdump kernel
~~~~~~~~~~~~~~~~~~~~~
As mentioned above, the init script _/etc/init.d/boot.kdump_ takes the part of
loading the kdump kernel. As kdump kernel, the normal system kernel is used, no
special kernel image is required.

However, as initramfs, a special initramfs is built by *mkdumprd*(8). Normally,
you don't have to take care about that step since the init script checks if the
initramfs is up to date (reading the configuration file modification time) and
rebuilds it if necessary.

To manually load the kdump kernel (i.e, without the SUSE init script), you have
to use the *kexec*(8) tool with the _-p_ (panic kernel) parameter like:

--------------------------------------------------------------------
# kexec -p /boot/vmlinuz-version --initrd=/boot/initrd-version-kdump
--reuse-cmdline
--------------------------------------------------------------------


Testing
-------
It perfectly makes sense to test the kdump configuration in a sane system state,
i.e. not when the system really crashes but to trigger the dump manually. To
perform that, use the SysRq mechanism, i.e. just execute

---------------------------------------
# echo s > /proc/sysrq-trigger
# echo u > /proc/sysrq-trigger
# echo c > /proc/sysrq-trigger
---------------------------------------

After that, the panic kernel should boot and the dump should be saved.

Configuration
-------------

The configuration file is _/etc/sysconfig/kdump_. Just edit this file with a
plain text editor to adjust the settings. You can also use the YaST2 sysconfig
editor. All variables are described in *kdump*(5). Here's a brief overview about
some variables that are worth tweaking.

Save Directory
~~~~~~~~~~~~~~
The most important setting is where the dump should be saved. Following methods
are available:

* local file,
* FTP,
* SFTP (SSH),
* NFS,
* CIFS.

The recommendation is to use FTP or SFTP for network dumping or the local file
dump. The configuration variable _KDUMP_SAVEDIR_ has to be filled with a URL to
where the dump should be saved. The syntax is described in *kdump*(5).

If the directory does not exist, it will be created. Since the dump is taken in
initrd, the network and mount configuration is a bit different from the normal
system. However, the *mkdumprd*(8) script is designed to do everything
automatically for you. If you would like to use a special network interface, see
the _KDUMP_NETCONFIG_ setting.

Example:

* +file:///var/log/dump+
* +ftp://user@host:server/incoming/dumps+

[NOTE]
If you want to use SFTP with public key authentication, make sure to read the
"Secure File Transfer Protocol" section in *kdump*(5).

Deletion of old dumps
~~~~~~~~~~~~~~~~~~~~~
If you save the dumps to your local file system, you may want that kdump deletes
automatically old dumps. Set _KDUMP_KEEP_OLD_DUMPS_ to the value how much old
dumps should be preserved. To disable deletion of old dumps, set it to _0_, and
to delete all old dumps, set it to _-1_.

If the partition has less than _KDUMP_FREE_DISK_SIZE_ megabytes free disk space
after saving the dump, the dump is not copied at all.

[IMPORTANT]
That two options don't apply to network dump targets.

Dump Filtering and Compression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The size of kernel dumps is uncompressed and unfiltered as large as your system
has RAM. To get smaller files (for example, to send it to support), you can
compress the whole dump file afterwards. However, the drawback is that the dump
has to be uncompressed afterwards before opening, so the disk space needs to be
there in any case.

To use page compression which compresses every page and allows dynamic
uncompression with the *crash*(8) debugging tool, set _KDUMP_DUMPFORMAT_ to
_compressed_ (which is actually the default).

To filter the dump, you have to set the _KDUMP_DUMPLEVEL_. Then not all memory
is saved to disk but only memory that does not fulfil some criteria. I.e. you
may want to leave out pages that are completely filled by zeroes as they don't
contain any useful information. The following table lists for each
_KDUMP_DUMPLEVEL_ the pages that are *skipped*, i.e. _0_ produces a full dump
and _31_ is the smallest dump.

'------------.----------.----------.-------------.---------.----------
dump level   zero page  cache page cache private user data free page
----------------------------------------------------------------------
 0
 1           X
 2                      X
 3           X          X
 4                      X          X
 5           X          X          X
 6                      X          X
 7           X          X          X
 8                                               X
 9           X                                   X
10                      X                        X
11           X          X                        X
12                      X          X             X
13           X          X          X             X
14                      X          X             X
15           X          X          X             X
16                                                         X
17           X                                             X
18                      X                                  X
19           X          X                                  X
20                      X          X                       X
21           X          X          X                       X
22                      X          X                       X
23           X          X          X                       X
24                                               X         X
25           X                                   X         X
26                      X                        X         X
27           X          X                        X         X
28                      X          X             X         X
29           X          X          X             X         X
30                      X          X             X         X
31           X          X          X             X         X
----------------------------------------------------------------------

Automatic Reboot and Error handling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you want to have your machine rebooted automatically after the dump has been
copied, set _KDUMP_IMMEDIATE_REBOOT_ to _yes_. The variable
_KDUMP_CONTINUE_ON_ERROR_ controls if a shell should be opened if something goes
wrong while saving the dump to be able to fixup manually. This is mostly for
debugging. 

In production, use that only if you have a serial console since VGA console and
keyboard is not reliable in kdump environment.

Notification
~~~~~~~~~~~~
If you enable notification support, then you get an email after the dump has
been copied (and before the _KDUMP_IMMEDIATE_REBOOT_ takes place). Because we
don't have a mail server running in initrd where the mail has to be sent, you
have to configure a SMTP server:

* _KDUMP_SMTP_SERVER_ must hold a hostname (and an optional port, separated by a
  colon) to a SMTP server.
* _KDUMP_STMP_USER_ and _KDUMP_SMTP_PASSWORD_ must be set to username and
  password if SMTP AUTH should be used, or empty otherwise (plain SMTP without
  authentication will be used).

Then an email will be sent to the address in _KDUMP_NOTIFICATION_TO_ (only one
address possible) and _KDUMP_NOTIFICATION_CC_ (multiple addresses possible).


Debugging options
~~~~~~~~~~~~~~~~~
If something goes wrong and you possibly opened a bug report, you may be asked
to increase verbosity to report what's going wrong. Also, this is useful if you
would like to find the cause yourself.

At first, you can increase _KDUMP_VERBOSE_. The maximum log level is _15_. That
gives both information when loading the dump kernel (i.e. the _rckdump start_
command) and also when copying the dump in initrd.

[WARNING]
If you use a VGA console and trigger the dump when X11 is running (i.e. your
graphical desktop), you might not see any output. Use a serial console in that
case, or try to trigger the dump from Linux console (i.e. press _Ctrl-Alt-F1_
in your graphical desktop and log in there).

If the problem is the *makedumpfile*(8) filtering tool, then set
_MAKEDUMPFILE_OPTIONS_ to _-D_ to get debugging output of makedumpfile.

Advanced Configuration
----------------------

Trigger Kdump on NMI (i386/x86_64 only)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some systems (mostly "Enterprise" servers) have a so-called NMI button
(physically or via the remote management consoles) that triggers an NMI
manually if the system hangs completely and even SysRQ does not work any more.

If you want to trigger a kdump in that case, you have to execute

 # sysctl kernel.panic_on_unrecovered_nmi=1

manually or (if you want to make that a permanent setting) add

 kernel.panic_on_unrecovered_nmi=1

in _/etc/sysctl.conf_.


[[crashkernel_exteded]]
Extended crashkernel commandline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While the "crashkernel=size[@offset]" syntax is sufficient for most
configurations, sometimes it's handy to have the reserved memory dependent
on the value of System RAM -- that's mostly for distributors that pre-setup
the kernel command line to avoid a unbootable system after some memory has
been removed from the machine.

The syntax is:

    crashkernel=<range1>:<size1>[,<range2>:<size2>,...][@offset]
    range=start-[end]

while _start_ is inclusive and _end_ is exclusive.

For example:

    crashkernel=512M-2G:64M,2G-:128M

This would mean:

. If the RAM is smaller than 512M, then don't reserve anything
  (this is the "rescue" case).
. If the RAM size is between 512M and 2G (exclusive), then reserve 64M.
. If the RAM size is larger than 2G, then reserve 128M.

Bugs
----

Known Problems
~~~~~~~~~~~~~~
There are known problems when using Kdump on Xen.

. Dump filtering does not work. Use a _KDUMP_DUMPLEVEL_ of _0_ and set
  _KDUMP_DUMPFORMAT_ to _ELF_. That are *not* the default settings, so you
  have to change that settings if you're using Xen.

New Bugs
~~~~~~~~
Please report bugs and enhancement requests at https://bugzilla.novell.com[].

Copying
-------
Copyright (c) 2008 Bernhard Walle <bwalle@suse.de>. Free use of this software is
granted under the terms of the GNU General Public License (GPL), version 2 or
later.

See also
--------
*kexec*(8), *kdump*(5), *makedumpfile*(8), *crash*(8),
The Kexec and Kdump chapter in the SUSE System Analysis and Tuning Guide


// vim: set sw=4 ts=4 et tw=80 fdm=marker: :collapseFolds=1:
